package linkedlist;

public class Joseph {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		CircleSingleLinkedList circleSingleLinkedList = new CircleSingleLinkedList();
		circleSingleLinkedList.addBoy(5);
//		circleSingleLinkedList.showBoy();
		circleSingleLinkedList.countBoy(1, 2, 5);
	}

}

//创建一个环形的单向链表
class CircleSingleLinkedList{
	private Boy first = null;  //创建一个first节点，当前没有编号
	
	//添加小孩节点，构成一个环形链表
	public void addBoy(int nums) {
		//nums校验
		if(nums < 1) {
			System.out.println("nums的值不正确");
			return;
		}
		
		Boy curBoy = null;  //辅助指针，帮助构建环形链表
		
		//使用循环来创建链表
		for(int i=1; i<=nums; i++) {
			//根据编号，创建小孩节点
			Boy boy = new Boy(i);
			//如果是第一个小孩
			if(i==1) {
				first = boy;
				first.setNext(first);   //构成环
				curBoy = first;   //让curBoy指向第一个小孩
			}else {
				curBoy.setNext(boy);
				boy.setNext(first);
				curBoy = boy;
				
			}
		}
	}
	
	//遍历当前的环形链表
	public void showBoy() {
		//判断链表是否为空
		if(first == null) {
			System.out.println("没有任何小孩");
			return;
		}
		
		Boy curBoy = first;
		while(true) {
			System.out.printf("小孩的编号%d\n",curBoy.getNo());
			if(curBoy.getNext() == first) {
				break;
			}
			curBoy = curBoy.getNext();
		}
	}
	
	
	//小孩出圈
	/**
	 * 
	 * @param startNo    表示从第几个小孩开始数数
	 * @param countNum   表示数几下
	 * @param nums       表示最初有多少小孩在圈中
	 */
	public void countBoy(int startNo, int countNum, int nums) {
		//数据校验
		if(first==null || startNo<1 || startNo>nums) {
			System.out.println("参数输入有误，请重新输入");
			return;
		}
		
		Boy helper = first; //辅助指针，一开始指向环形链表的最后一个节点
		while(true) {
			if(helper.getNext()==first) {  //说明helper指向最后一个节点
				break;
			}
			helper = helper.getNext();
		}
		
		//小孩报数前，让first和helper指针同时移动
		while(true) {
			if(helper == first) {   //说明链表中只有一个节点
				break;
			}
			//让first和helper同时移动countNum-1
			for(int j=0; j<countNum-1; j++) {
				first = first.getNext();
				helper = helper.getNext();
			}
			//这时first指向的节点就是要出圈的小孩的节点
			System.out.printf("小孩%d出圈\n",first.getNo());
			first = first.getNext();
			helper.setNext(first);
		}
		System.out.printf("最后留在圈中的小孩编号%d",first.getNo());
		
	}
	
	
	
}



//创建一个Boy类，表示一个节点
class Boy{
	private int no;   //编号
	private Boy next; //指向下一个节点，默认为null
	
	public Boy(int no) {
		this.no = no;
	}

	public int getNo() {
		return no;
	}

	public void setNo(int no) {
		this.no = no;
	}

	public Boy getNext() {
		return next;
	}

	public void setNext(Boy next) {
		this.next = next;
	}
}